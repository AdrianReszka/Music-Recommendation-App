package com.example.service;

import com.example.model.CreateSpotifyPlaylistRequest;
import com.example.model.User;
import com.example.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.springframework.beans.factory.annotation.Value;

import java.net.URI;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class SpotifyService {

    @Value("${spotify.client-id}")
    private String clientId;

    @Value("${spotify.client-secret}")
    private String clientSecret;

    @Value("${spotify.redirect-uri}")
    private String redirectUri;

    private final UserRepository userRepository;

    private final RestTemplate restTemplate = new RestTemplate();

    public URI buildAuthorizationUri(Integer userId) {
        String scopes = URLEncoder.encode("playlist-modify-private playlist-modify-public", StandardCharsets.UTF_8);
        return URI.create("https://accounts.spotify.com/authorize" +
                "?client_id=" + clientId +
                "&response_type=code" +
                "&redirect_uri=" + URLEncoder.encode(redirectUri, StandardCharsets.UTF_8) +
                "&scope=" + scopes +
                "&state=" + userId);
    }

    public void exchangeCodeForToken(String code, Long userId) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        headers.setBasicAuth(clientId, clientSecret);

        MultiValueMap<String, String> form = new LinkedMultiValueMap<>();
        form.add("grant_type", "authorization_code");
        form.add("code", code);
        form.add("redirect_uri", redirectUri);

        HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<>(form, headers);

        ResponseEntity<Map> response = new RestTemplate().exchange(
                "https://accounts.spotify.com/api/token",
                HttpMethod.POST,
                request,
                Map.class
        );

        String accessToken = (String) response.getBody().get("access_token");

        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));
        user.setSpotifyToken(accessToken);
        userRepository.save(user);
    }

    public String getDisplayName(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        String token = user.getSpotifyToken();
        if (token == null) throw new RuntimeException("User not connected to Spotify");

        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token);

        HttpEntity<Void> request = new HttpEntity<>(headers);

        ResponseEntity<Map> response = restTemplate.exchange(
                "https://api.spotify.com/v1/me",
                HttpMethod.GET,
                request,
                Map.class
        );

        return (String) response.getBody().get("display_name");
    }


    public void createPlaylistForUser(CreateSpotifyPlaylistRequest request, Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        String accessToken = user.getSpotifyToken();
        if (accessToken == null) throw new RuntimeException("Spotify token not found");

        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(accessToken);
        HttpEntity<?> entity = new HttpEntity<>(headers);

        ResponseEntity<Map> profile = restTemplate.exchange(
                "https://api.spotify.com/v1/me",
                HttpMethod.GET,
                entity,
                Map.class
        );
        String spotifyUserId = (String) profile.getBody().get("id");

        Map<String, Object> playlistPayload = Map.of(
                "name", request.getName(),
                "description", "Generated by BeatBridge",
                "public", false
        );
        HttpEntity<Map<String, Object>> playlistEntity = new HttpEntity<>(playlistPayload, headers);

        ResponseEntity<Map> created = restTemplate.exchange(
                "https://api.spotify.com/v1/users/" + spotifyUserId + "/playlists",
                HttpMethod.POST,
                playlistEntity,
                Map.class
        );
        String playlistId = (String) created.getBody().get("id");

        Map<String, Object> tracksPayload = Map.of("uris", request.getTrackUris());
        HttpEntity<Map<String, Object>> tracksEntity = new HttpEntity<>(tracksPayload, headers);

        restTemplate.exchange(
                "https://api.spotify.com/v1/playlists/" + playlistId + "/tracks",
                HttpMethod.POST,
                tracksEntity,
                Void.class
        );
    }
}
